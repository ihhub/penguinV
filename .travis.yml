sudo: required

language: cpp

matrix:
  # Windows builds are experimental in Travis, ignore job results in case of failure!
  allow_failures:
    - os: windows
    - os: linux
      env: DYNAMIC_ANALYSIS=ON PENGUINV_UNIT_TEST_RUN_COUNT=10 CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Debug"
  include:
    - os: linux
      addons:
        apt:
          sources:
            - sourceline: 'ppa:beineri/opt-qt596-xenial'
          packages:
            - libgl-dev
            - libpng-dev
            - libjpeg-dev
            - ocl-icd-opencl-dev
            - opencl-headers
          update: true
      name: "Linux (Ubuntu) with CUDA 8 and Qt 5.9"
      env: CUDA=8.0.61-1 QT_BASE=59 CMAKE_OPTIONS="-DPENGUINV_BUILD_TEST=ON"
      before_install:
        - source script/travis/install_cuda.sh
        - source script/travis/install_qt5.sh
    - os: linux
      arch: arm64
      addons:
        apt:
          sources:
            - sourceline: 'ppa:beineri/opt-qt596-xenial'
          packages:
            - libgl-dev
            - libpng-dev
            - libjpeg-dev
            - ocl-icd-opencl-dev
            - opencl-headers
          update: true
      name: "Linux (Ubuntu) ARM"
      before_script:
        - cd test/unit_tests
      script:
        - make -j 2
        - ./unit_tests
        - cd ../performance_tests
        - make -j 2
        - cd ../../examples
        - make -j 2
    - os: osx
      name: "OSX with QT latest"
      env: QT_BASE=latest CMAKE_OPTIONS=""
      before_install: source script/travis/install_qt5.sh
    - os: linux
      language: python
      name: "Python 3.6 module compilation"
      python: 3.6
      env: SWIG=ON
      before_script:
        - wget https://github.com/swig/swig/archive/rel-3.0.12.tar.gz
        - tar xzf rel-3.0.12.tar.gz && cd swig-rel-3.0.12
        - ./autogen.sh
        - ./configure --prefix=${HOME}/swig/
        - make -j 2
        - make install
        - export PATH=${HOME}/swig/bin:$PATH
        - swig -version
        - python --version
      script:
        - cd $TRAVIS_BUILD_DIR/src/python && python setup.py build_ext --inplace
        - cd $TRAVIS_BUILD_DIR/examples/python && python bitmap_operation.py
    - os: linux
      name: "Static analysis"
      env: STATIC_ANALYSIS=ON
      before_install:
        - |
          if [[ "$TRAVIS_PULL_REQUEST" != "false" ]]; then
            curl -L http://llvm.org/svn/llvm-project/cfe/trunk/tools/clang-format/clang-format-diff.py -o $TRAVIS_BUILD_DIR/script/clang-format-diff.py;
          fi
      script:
        - export EXCLUDE_PATTERN_1=" not found in expected header ";
        - export EXCLUDE_PATTERN_2=" does not need to be \#included; use a forward declaration instead";
        - export EXCLUDE_PATTERN_3=" not found in any directly \#included header";
        - git clone https://github.com/myint/cppclean;
        - ./cppclean/cppclean src test examples | grep -v "$EXCLUDE_PATTERN_1" | grep -v "$EXCLUDE_PATTERN_2" | grep -v "$EXCLUDE_PATTERN_3";
        - cd ${TRAVIS_BUILD_DIR}
        - |
          if [[ "$TRAVIS_PULL_REQUEST" != "false" ]]; then
            echo "Checking clang-format between TRAVIS_BRANCH=$TRAVIS_BRANCH and TRAVIS_PULL_REQUEST_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH"
            bash $TRAVIS_BUILD_DIR/script/check_code_format.sh
          else
            echo "Skipping clang-format check since this is not a pull request."
          fi
    - os: linux
      addons:
        apt:
          sources:
            - sourceline: 'ppa:beineri/opt-qt596-xenial'
          packages:
            - libgl-dev
            - libpng-dev
            - libjpeg-dev
            - ocl-icd-opencl-dev
            - opencl-headers
          update: true
      name: "Dynamic analysis"
      env: DYNAMIC_ANALYSIS=ON PENGUINV_UNIT_TEST_RUN_COUNT=10 CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Debug"
      after_script:
        - cat "${TRAVIS_BUILD_DIR}/build/Testing/Temporary/MemoryChecker.2.log" > out && cat out
        - test ! -s out
      addons:
        apt:
          update: true
          packages: valgrind
    - os: windows
      name: "Windows (x86) with VS2015"
      env:
        - TARGET="Visual Studio 14 2015"
        - BUILD_TYPE="Release"
      before_install: if [[ "$TRAVIS_EVENT_TYPE" == "cron" ]]; then choco install -y vcbuildtools --version 2015.4 --force; fi
    - os: windows
      name: "Windows (x64) with VS2015"
      language: bash
      env:
        - TARGET="Visual Studio 14 2015 Win64"
        - BUILD_TYPE="Release"
      before_install: if [[ "$TRAVIS_EVENT_TYPE" == "cron" ]]; then choco install -y vcbuildtools --version 2015.4 --force; fi

before_script:
  # Let CMake generate build files
  - |
    if [[ "$TRAVIS_EVENT_TYPE" == "cron" && "$DYNAMIC_ANALYSIS" != "ON" ]]; then
      export PENGUINV_UNIT_TEST_RUN_COUNT=1000
    fi
    if [[ "$STATIC_ANALYSIS" != "ON" ]]; then
      mkdir -p build && cd build
      if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
        if [[ "$TRAVIS_EVENT_TYPE" == "cron" ]]; then
          cmake -G "$TARGET" ..;
        fi
      else
        cmake .. ${CMAKE_OPTIONS}
      fi
    fi

script:
  - |
    # Build and run tests
    if [[ "$TRAVIS_EVENT_TYPE" == "cron" || "$TRAVIS_OS_NAME" != "windows" ]]; then
      set -e
      if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
        cmake --build . --config $BUILD_TYPE # --config is ignored on Linux/MacOS
      else
        cmake --build . -- -j 2
      fi
      set +e
      if [[ "$DYNAMIC_ANALYSIS" == "ON" ]]; then
        ctest --overwrite MemoryCheckCommandOptions="--show-reachable=no" \
              -R unit_test --extra-verbose \
              -T MemCheck # execute unit_test only
      else
        if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
          ctest -C $BUILD_TYPE -E 'perf_test' --extra-verbose # execute unit_test and unit_test_opencl
        else
          ctest -E 'perf_test' --extra-verbose # execute unit_test and unit_test_opencl
        fi
      fi
    fi
